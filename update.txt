export const putRegister = async (req, res) => {
  try {
    const { id, username, password, name, tell, address } = req.body;

    // เข้ารหัส
    const salt = bcrypt.genSaltSync(saltRounds);
    const hashedPassword = bcrypt.hashSync(password, salt);

    // Check Username
    const sqlScheck = `SELECT username, password FROM users WHERE username = ? `;
    const [resultCheck] = await pool.query(sqlScheck, [username]);

    if (resultCheck[0]) {
      // มี username ในระบบแล้ว
      // เช็ค username กับ id
      const sqlCheckMyid = `SELECT username FROM users WHERE id = ? AND username = ?`;
      const [resultCheckMyId] = await pool.query(sqlCheckMyid, [id, username]);

      if (resultCheckMyId.length > 0) {
        // username ตรงกับ ID แสดงว่าคือ เราเอง แก้ได้เลย
        const sql = `UPDATE users SET password = ?, name = ?, tell = ?, address = ? WHERE id = ?`;
        await pool.query(sql, [
          password === "" ? resultCheck[0] : hashedPassword,
          name,
          tell,
          address,
          id,
        ]);
        res.status(200).json({ message: "แก้ไขสำเร็จ" });
      } else {
        // ไม่ตรงกับ ID เรา แสดงว่าเป็น username คนอื่น ไม่ให้ใช้นะ
        res.status(400).json({ message: "มีผู้ใช้งานนี้แล้ว" });
      }
    } else {
      // ยังไม่เคยมี Username ในระบบ
      const sql = `UPDATE users SET username = ?, password = ?, name = ?, tell = ?, address = ? WHERE id = ?`;
      await pool.query(sql, [
        username,
        password === "" ? resultCheck[0] : hashedPassword,
        name,
        tell,
        address,
        id,
      ]);
      res.status(200).json({ message: "แก้ไขสำเร็จ !" });
    }
  } catch (error) {
    console.error(error);
  }
};



แก้ไข ********************

export const putRegister = async (req, res) => {
  try {
    const { id, username, password, name, tell, address } = req.body;

    // Check Username
    const sqlScheck = `SELECT username, password FROM users WHERE username = ? `;
    const [resultCheck] = await pool.query(sqlScheck, [username]);

    if (resultCheck[0]) {
      // มี username ในระบบแล้ว
      // เช็ค username กับ id
      const sqlCheckMyid = `SELECT username FROM users WHERE id = ? AND username = ?`;
      const [resultCheckMyId] = await pool.query(sqlCheckMyid, [id, username]);

      if (resultCheckMyId.length > 0) {
        // username ตรงกับ ID แสดงว่าคือ เราเอง แก้ได้เลย
        const sql = `UPDATE users SET password = ?, name = ?, tell = ?, address = ? WHERE id = ?`;
        await pool.query(sql, [
          password === "" ? resultCheck[0] : hashedPassword,
          name,
          tell,
          address,
          id,
        ]);
        res.status(200).json({ message: "แก้ไขสำเร็จ" });
      } else {
        // ไม่ตรงกับ ID เรา แสดงว่าเป็น username คนอื่น ไม่ให้ใช้นะ
        res.status(400).json({ message: "มีผู้ใช้งานนี้แล้ว" });
      }
    } else {
      // ยังไม่เคยมี Username ในระบบ
      const sql = `UPDATE users SET username = ?, password = ?, name = ?, tell = ?, address = ? WHERE id = ?`;
      await pool.query(sql, [
        username,
        password === "" ? resultCheck[0] : hashedPassword,
        name,
        tell,
        address,
        id,
      ]);
      res.status(200).json({ message: "แก้ไขสำเร็จ !" });
    }
  } catch (error) {
    console.error(error);
  }
};